@model _BookNeT_.Models.Books

<h2>Edit Book</h2>

<form method="post" action="/Books/Edit/@Model.BookID" onsubmit="return validateForm()">
    @Html.AntiForgeryToken()
    <input type="hidden" name="BookID" value="@Model.BookID" />

    <div class="form-group">
        <label>Book's name *</label>
        <input type="text" name="Title" class="form-control" required value="@Model.Title" />
    </div>

    <div class="form-group">
        <label>Author's name *</label>
        <input type="text" name="Author" class="form-control" required value="@Model.Author" />
    </div>

    <div class="form-group">
        <label>Publisher *</label>
        <input type="text" name="Publisher" class="form-control" required value="@Model.Publisher" />
    </div>

    <div class="form-group">
        <label>Year Of Publication</label>
        <input type="number" name="YearOfPublication" class="form-control" value="@Model.YearOfPublication" min="1900" max="2024" />
    </div>
    
    <div class="form-group">
        <label>Image URL</label>
        <input type="url" name="ImageUrl" class="form-control" value="@Model.ImageUrl" />
    </div>

    <div class="form-group">
        <label>Format *</label>
        <select name="Format" class="form-control" required>
            <option value="pdf" @(Model.Format == "pdf" ? "selected" : "")>PDF</option>
            <option value="mobi" @(Model.Format == "mobi" ? "selected" : "")>MOBI</option>
            <option value="f2b" @(Model.Format == "f2b" ? "selected" : "")>F2B</option>
            <option value="epub" @(Model.Format == "epub" ? "selected" : "")>EPUB</option>
        </select>
    </div>

    <div class="form-group">
        <label>Age Category</label>
        <select name="AgeRestriction" class="form-control">
            <option value="" @(Model.AgeRestriction == null ? "selected" : "")>All Ages</option>
            <option value="8" @(Model.AgeRestriction == 8 ? "selected" : "")>Children (8-12)</option>
            <option value="12" @(Model.AgeRestriction == 12 ? "selected" : "")>Young Teen (12-14)</option>
            <option value="13" @(Model.AgeRestriction == 13 ? "selected" : "")>Teen & Young Adult (13-17)</option>
            <option value="18" @(Model.AgeRestriction == 18 ? "selected" : "")>Adult (18+)</option>
        </select>
    </div>
    
    <div class="form-group">
        <label>Genre *</label>
        <select name="Genre" class="form-control" required>
            <option value="Fiction" @(Model.Genre == "Fiction" ? "selected" : "")>Fiction</option>
            <option value="Non-Fiction" @(Model.Genre == "Non-Fiction" ? "selected" : "")>Non-Fiction</option>
            <option value="Science Fiction" @(Model.Genre == "Science Fiction" ? "selected" : "")>Science Fiction</option>
            <option value="Fantasy" @(Model.Genre == "Fantasy" ? "selected" : "")>Fantasy</option>
            <option value="Mystery" @(Model.Genre == "Mystery" ? "selected" : "")>Mystery</option>
            <option value="Biography" @(Model.Genre == "Biography" ? "selected" : "")>Biography</option>
            <option value="History" @(Model.Genre == "History" ? "selected" : "")>History</option>
            <option value="Self-Help" @(Model.Genre == "Self-Help" ? "selected" : "")>Self-Help</option>
        </select>
    </div>

    <div class="form-group">
        <label>Purchase Price *</label>
        <input type="number" name="PurchasePrice" class="form-control" required value="@Model.PurchasePrice" min="0" step="0.01" />
    </div>

    <div class="form-group">
        <label>Borrow Price</label>
        <input type="number" name="BorrowPrice" class="form-control" value="@Model.BorrowPrice" min="0" step="0.01" />
    </div>

    <div class="form-group">
        <label>Number of copies *</label>
        <input type="number" name="Stock" class="form-control" required value="@Model.Stock" min="0" />
    </div>

    <div class="form-group">
        <label>Is Borrowable *</label>
        <select name="IsBorrowable" class="form-control" required>
            <option value="true" @(Model.IsBorrowable == true ? "selected" : "")>Yes</option>
            <option value="false" @(Model.IsBorrowable == false ? "selected" : "")>No</option>
        </select>
    </div>

    <div class="form-group">
        <label>Is Discounted *</label>
        <select name="IsDiscounted" class="form-control" required onchange="toggleDiscountPercentage()">
            <option value="true" @(Model.IsDiscounted == true ? "selected" : "")>Yes</option>
            <option value="false" @(Model.IsDiscounted == false ? "selected" : "")>No</option>
        </select>
    </div>

    <div class="form-group">
        <label>Discount Percentage</label>
        <input type="number" name="DiscountPercentage" class="form-control" min="0" max="100" step="0.01" value="@Model.DiscountPercentage" id="discountPercentage" />
    </div>
    
    <div class="form-group">
        <label>Discount End Date</label>
        <input type="date" name="DiscountEndDate" class="form-control" value="@(Model.DiscountEndDate?.ToString("yyyy-MM-dd"))" />
    </div>

    <div class="form-group">
        <label>Status *</label>
        <select id="statusField" name="Status" class="form-control" required>
            <option value="Available" @(Model?.Status == "Available" ? "selected" : "")>Available</option>
            <option value="Out of Stock" @(Model?.Status == "Out of Stock" ? "selected" : "")>Out of Stock</option>
            <option value="Coming Soon" @(Model?.Status == "Coming Soon" ? "selected" : "")>Coming Soon</option>
        </select>
    </div>



    <div class="form-group">
        <label>Description</label>
        <textarea name="Description" class="form-control" >@Model.Description</textarea>
    </div>

  
    <button type="submit" class="btn btn-primary">SAVE</button>
    <a href="/Books/Index" class="btn btn-secondary">Back to list</a>
</form>

<script>
function updateStatus() {
    const stockValue = parseInt(document.querySelector('input[name="Stock"]').value);
    const statusField = document.getElementById('statusField');
    
    // מעדכן את האפשרויות הזמינות
    const availableOption = statusField.querySelector('option[value="Available"]');
    const outOfStockOption = statusField.querySelector('option[value="Out of Stock"]');
    const comingSoonOption = statusField.querySelector('option[value="Coming Soon"]');
    
    if (stockValue === 0) {
        availableOption.disabled = true;     // חוסם Available כשאין מלאי
        outOfStockOption.disabled = false;
        comingSoonOption.disabled = false;   // מאפשר Coming Soon רק כשאין עותקים
        if (statusField.value === "Available") {
            statusField.value = "Out of Stock";
        }
    } else {
        availableOption.disabled = false;
        outOfStockOption.disabled = true;    // חוסם Out of Stock כשיש מלאי
        comingSoonOption.disabled = true;    // חוסם Coming Soon כשיש עותקים
        if (statusField.value === "Out of Stock" || statusField.value === "Coming Soon") {
            statusField.value = "Available";
        }
    }
}

// מאזינים לשינויים
document.querySelector('input[name="Stock"]').addEventListener('change', updateStatus);
document.querySelector('select[name="IsBorrowable"]').addEventListener('change', updateStatus);

// הפעלה ראשונית של הבדיקה
updateStatus();

function toggleDiscountPercentage() {
    const isDiscounted = document.querySelector('select[name="IsDiscounted"]').value;
    const discountPercentageField = document.getElementById('discountPercentage');

    // אם בחרו "Yes" לאפשר את השדה, אחרת לחסום אותו
    if (isDiscounted === "true") {
        discountPercentageField.disabled = false; // לא לחסום
    } else {
        discountPercentageField.disabled = true; // לחסום
        discountPercentageField.value = ''; // מנקה את הערך אם זה לא פעיל
    }
}

// הפעלה ראשונית של הפונקציה כשהדף נטען
document.addEventListener('DOMContentLoaded', function() {
    toggleDiscountPercentage();  // בודק את הערך הקיים ומחיל את המצב המתאים
});




</script>